{"version":3,"file":"_id_-e6b2d263.js","sources":["../../../../pages/iris/[id].vue"],"sourcesContent":["<script setup>\r\n  import {\r\n    ref,\r\n    onMounted\r\n  } from 'vue';\r\n  import moment from 'moment';\r\n  import io from 'socket.io-client';\r\n  import axios from 'axios';\r\n\r\n  definePageMeta({\r\n    layoutTransition: true,\r\n    middleware: defineNuxtRouteMiddleware((to, from) => {\r\n      return navigateTo('/innocence');\r\n    })\r\n  });\r\n\r\n  const socket = io('ws://127.0.0.1:8000', { transports: ['websocket', 'polling', 'long-polling'], secure: true, reconnection: true });\r\n  const route = useRoute()\r\n  const router = useRouter()\r\n\r\n  const userId = ref(null);\r\n  const username = ref('');\r\n  const newMessage = ref('');\r\n  const messages = ref([]);\r\n  const typing = ref(false);\r\n  const typingMessage = ref('Someone is typing...');\r\n  const flagAlert = ref('');\r\n  const textAlert = ref('');\r\n  const showAlert = ref(false);\r\n\r\n  const dataRoom = route.params.id?.split('$');\r\n  const roomName = atob(dataRoom[0]);\r\n  const room = ref({});\r\n  const members = ref([]);\r\n  const dialogMembers = ref(false);\r\n\r\n  const sendMessage = () => {\r\n    if (newMessage.value.trim() !== '') {\r\n      messages.value.push({\r\n        id: Date.now(),\r\n        sender: username.value,\r\n        text: newMessage.value,\r\n        time: moment(new Date()).format('H:mm')\r\n      });\r\n\r\n      socket.emit('sendMessage', {\r\n        roomCode: route.params.id,\r\n        userId: userId.value,\r\n        sender: username.value,\r\n        message: newMessage.value\r\n      })\r\n\r\n      newMessage.value = '';\r\n\r\n      setTimeout(() => {\r\n        let out = document.getElementById('listChat');\r\n        out.scrollTop = out.scrollHeight\r\n      }, 50);\r\n    }\r\n  };\r\n  \r\n  const getExistingRoom = async () => {\r\n    const payload = {\r\n      code: route.params.id,\r\n      type: 'GROUP',\r\n      userId: userId.value\r\n    }\r\n\r\n    await axios.post('http://127.0.0.1:8000/room/detail', payload).then((res) => {\r\n      room.value = res.data.data;\r\n    }).catch((err) => {\r\n      throw new Error(err);\r\n    });\r\n  }\r\n\r\n  const getHistoryMessage = async () => {\r\n    const payload = {\r\n      roomCode: route.params.id,\r\n      userId: userId.value\r\n    }\r\n    \r\n    await axios.post(`http://127.0.0.1:8000/history-messages`, payload).then((res) => {\r\n      const result = res.data.data\r\n      for (let i = 0; i < result.length; i++) {\r\n        messages.value.push({\r\n          id: result[i].id,\r\n          sender: result[i].username,\r\n          text: result[i].text,\r\n          time: moment(result[i].created_at).format('H:mm')\r\n        });\r\n      }\r\n\r\n      setTimeout(() => {\r\n        let out = document.getElementById('listChat');\r\n        out.scrollTop = out.scrollHeight\r\n      }, 50);\r\n    }).catch((err) => {\r\n      throw new Error(err);\r\n    });\r\n  }\r\n\r\n  const toShowMembers = async () => {\r\n    const payload = {\r\n      code: route.params.id,\r\n    }\r\n\r\n    await axios.post('http://127.0.0.1:8000/room/members', payload).then((res) => {\r\n      members.value = res.data.data;\r\n    }).catch((err) => {\r\n      throw new Error(err);\r\n    }).finally(() => {\r\n      dialogMembers.value = true;\r\n    });\r\n  }\r\n\r\n  const toCopyCode = () => {\r\n    navigator.clipboard.writeText(route.params.id).then(() => {\r\n      flagAlert.value = 'success';\r\n      textAlert.value = 'Success copied to clipboard';\r\n      showAlert.value = true;\r\n\r\n      setTimeout(() => {\r\n        showAlert.value = false;\r\n      }, 1000);\r\n    })\r\n  }\r\n\r\n  onMounted(() => {\r\n    const request = indexedDB.open('iris', 3);\r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      const objectStore = db\r\n        .transaction(\"user\", \"readwrite\")\r\n        .objectStore(\"user\");\r\n  \r\n      objectStore.getAll().onsuccess = (event) => {\r\n        userId.value = event.target.result[0]?.user_id;\r\n        username.value = event.target.result[0]?.username;\r\n      };\r\n    }\r\n\r\n    setTimeout(async () => {\r\n      await socket.connect();\r\n  \r\n      await socket.on('connect', () => {\r\n        console.log('------SOCKET CONNECTION IS ESTABLISHED------');\r\n  \r\n        socket.on('disconnect', reason => {\r\n          console.log(`------SOCKET CONNECTION IS DISCONNECT, ${reason}-------`);\r\n        });\r\n      });\r\n  \r\n      await socket.on('reconnect', () => {\r\n        console.log(`------SOCKET CONNECTION IS SUCCESSFULLY RECONNECTED-------`);\r\n      });\r\n  \r\n      await socket.on('reconnecting', attempt => {\r\n        console.log(`------SOCKET CONNECTION IS ATTEMPTING TO RECONNECT-------`);\r\n      });\r\n  \r\n      await socket.emit('joinRoom', {\r\n        roomCode: route.params.id,\r\n        roomName,\r\n        roomType: 'GROUP',\r\n        userId: userId.value\r\n      });\r\n\r\n      await getExistingRoom()\r\n      await getHistoryMessage()\r\n    }, 500);\r\n  })\r\n\r\n  socket.on('receivedMessage', data => {\r\n    console.log('Receive Message => ', data);\r\n\r\n    if (data.message.trim() !== '') {\r\n      messages.value.push({\r\n        id: Date.now(),\r\n        sender: data.sender,\r\n        text: data.message,\r\n        time: moment(new Date()).format('H:mm')\r\n      });\r\n\r\n      setTimeout(() => {\r\n        let out = document.getElementById('listChat');\r\n        out.scrollTop = out.scrollHeight\r\n      }, 50);\r\n    }\r\n  })\r\n</script>\r\n\r\n<template>\r\n  <div class=\"containerz\">\r\n\r\n    <v-card class=\"elevation-12 chatbox\">\r\n      <v-card-title class=\"headline text-white bg-primary d-flex\" style=\"align-items: center;\">\r\n        <v-icon class=\"icon-back\" @click=\"router.back()\">mdi-arrow-left-bold</v-icon>\r\n        <img :src=\"room.img\" alt=\"\" class=\"room-img mr-2\">\r\n        <b style=\"flex: auto;\">{{ room.name }}</b>\r\n\r\n        <v-menu>\r\n          <template v-slot:activator=\"{ props }\">\r\n            <v-icon class=\"icon-menus\" v-bind=\"props\">mdi-dots-vertical</v-icon>\r\n          </template>\r\n\r\n          <v-list class=\"py-0\">\r\n            <v-list-item>\r\n              <v-list-item-title>\r\n                <v-btn text block @click.prevent=\"toShowMembers()\">Members</v-btn>\r\n              </v-list-item-title>\r\n              <v-list-item-title>\r\n                <v-btn text block @click.prevent=\"toCopyCode()\">Invite</v-btn>\r\n              </v-list-item-title>\r\n            </v-list-item>\r\n          </v-list>\r\n        </v-menu>\r\n      </v-card-title>\r\n\r\n      <v-divider></v-divider>\r\n\r\n      <v-card-text class=\"body-chat\" id=\"listChat\">\r\n        <v-list v-if=\"messages.length > 0\">\r\n          <v-list-item-group v-for=\"(message, index) in messages\" :key=\"index\">\r\n            <v-list-item>\r\n              <div class=\"bubble-chat\" :class=\"{ 'float-end': message.sender === username }\">\r\n                <h5 className=\"mb-1\">{{ message.sender }}</h5>\r\n                <p className=\"bubble-chat-text\">{{ message.text }}</p>\r\n                <span className=\"bubble-chat-time\">{{ message.time }}</span>\r\n              </div>\r\n            </v-list-item>\r\n          </v-list-item-group>\r\n        </v-list>\r\n\r\n        <v-list-item v-if=\"typing\">\r\n          <v-list-item-content>\r\n            <v-list-item-title class=\"caption\">{{ typingMessage }}</v-list-item-title>\r\n          </v-list-item-content>\r\n        </v-list-item>\r\n      </v-card-text>\r\n\r\n      <v-divider></v-divider>\r\n\r\n      <v-card-actions>\r\n        <v-text-field v-model=\"newMessage\" label=\"Type a message...\" hide-details @keydown.enter=\"sendMessage\"></v-text-field>\r\n        <v-btn @click=\"sendMessage\" :disabled=\"newMessage.trim() === ''\" icon>\r\n          <v-icon>mdi-send</v-icon>\r\n        </v-btn>\r\n      </v-card-actions>\r\n    </v-card>\r\n\r\n    <v-dialog\r\n      v-model=\"dialogMembers\"\r\n      transition=\"dialog-bottom-transition\"\r\n      width=\"20%\"\r\n    >\r\n      <v-card>\r\n        <v-toolbar\r\n          color=\"primary\"\r\n          title=\"Member's List\"\r\n        ></v-toolbar>\r\n        <v-card-text class=\"py-4\">\r\n          <ul>\r\n            <li v-for=\"(item, i) in members\" :key=\"i\" class=\"ml-4\">\r\n              {{ item.username }}\r\n            </li>\r\n          </ul>\r\n        </v-card-text>\r\n        \r\n        <v-card-actions>\r\n          <v-btn\r\n            color=\"warning\"\r\n            variant=\"outlined\"\r\n            class=\"mr-3\"\r\n            @click=\"dialogMembers = false\"\r\n          >Close</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n\r\n    <Snackbars\r\n      :flag=\"flagAlert\"\r\n      :text=\"textAlert\"\r\n      v-model=\"showAlert\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n  .chatbox {\r\n    height: calc(100vh - 94px);\r\n  }\r\n\r\n  .body-chat {\r\n    height: calc(100% - 130px);\r\n    overflow: auto;\r\n  }\r\n\r\n  .bubble-chat {\r\n    width: 100%;\r\n    max-width: 400px;\r\n    height: auto;\r\n    border-radius: 8px;\r\n    padding: 10px 16px 30px;\r\n    background-color: aquamarine;\r\n    position: relative;\r\n    margin-bottom: 6px;\r\n}\r\n\r\n.bubble-chat-text {\r\n    font-size: 14px;\r\n}\r\n\r\n.bubble-chat-time {\r\n    font-size: 12px;\r\n    position: absolute;\r\n    bottom: 6px;\r\n    right: 8px;\r\n}\r\n\r\n.float-end {\r\n  float: inline-end;\r\n  background-color: aqua;\r\n}\r\n\r\n.icon-back {\r\n  font-size: 20px;\r\n  margin-right: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.room-img {\r\n  border-radius: 50%;\r\n  width: 40px;\r\n  height: 40px;\r\n}\r\n\r\n.icon-menus {\r\n  font-size: 20px;\r\n}\r\n</style>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBE,UAAM,SAAS,GAAG,uBAAuB,EAAE,YAAY,CAAC,aAAa,WAAW,cAAc,GAAG,QAAQ,MAAM,cAAc,KAAM,CAAA;AACnI,UAAM,QAAQ,SAAU;AACxB,UAAM,SAAS,UAAW;AAE1B,UAAM,SAAS,IAAI,IAAI;AACvB,UAAM,WAAW,IAAI,EAAE;AACvB,UAAM,aAAa,IAAI,EAAE;AACzB,UAAM,WAAW,IAAI,CAAA,CAAE;AACvB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,gBAAgB,IAAI,sBAAsB;AAChD,UAAM,YAAY,IAAI,EAAE;AACxB,UAAM,YAAY,IAAI,EAAE;AACxB,UAAM,YAAY,IAAI,KAAK;AAE3B,UAAM,YAAW,WAAM,OAAO,OAAb,mBAAiB,MAAM;AACvB,SAAK,SAAS,CAAC,CAAC;AACjC,UAAM,OAAO,IAAI,CAAA,CAAE;AACnB,UAAM,UAAU,IAAI,CAAA,CAAE;AACtB,UAAM,gBAAgB,IAAI,KAAK;AAE/B,UAAM,cAAc,MAAM;AACxB,UAAI,WAAW,MAAM,KAAI,MAAO,IAAI;AAClC,iBAAS,MAAM,KAAK;AAAA,UAClB,IAAI,KAAK,IAAK;AAAA,UACd,QAAQ,SAAS;AAAA,UACjB,MAAM,WAAW;AAAA,UACjB,MAAM,OAAO,oBAAI,KAAM,CAAA,EAAE,OAAO,MAAM;AAAA,QAC9C,CAAO;AAED,eAAO,KAAK,eAAe;AAAA,UACzB,UAAU,MAAM,OAAO;AAAA,UACvB,QAAQ,OAAO;AAAA,UACf,QAAQ,SAAS;AAAA,UACjB,SAAS,WAAW;AAAA,QAC5B,CAAO;AAED,mBAAW,QAAQ;AAEnB,mBAAW,MAAM;AACf,cAAI,MAAM,SAAS,eAAe,UAAU;AAC5C,cAAI,YAAY,IAAI;AAAA,QACrB,GAAE,EAAE;AAAA,MACN;AAAA,IACL;AA0CE,UAAM,gBAAgB,YAAY;AAChC,YAAM,UAAU;AAAA,QACd,MAAM,MAAM,OAAO;AAAA,MACpB;AAED,YAAM,MAAM,KAAK,sCAAsC,OAAO,EAAE,KAAK,CAAC,QAAQ;AAC5E,gBAAQ,QAAQ,IAAI,KAAK;AAAA,MAC/B,CAAK,EAAE,MAAM,CAAC,QAAQ;AAChB,cAAM,IAAI,MAAM,GAAG;AAAA,MACzB,CAAK,EAAE,QAAQ,MAAM;AACf,sBAAc,QAAQ;AAAA,MAC5B,CAAK;AAAA,IACF;AAED,UAAM,aAAa,MAAM;AACvB,gBAAU,UAAU,UAAU,MAAM,OAAO,EAAE,EAAE,KAAK,MAAM;AACxD,kBAAU,QAAQ;AAClB,kBAAU,QAAQ;AAClB,kBAAU,QAAQ;AAElB,mBAAW,MAAM;AACf,oBAAU,QAAQ;AAAA,QACnB,GAAE,GAAI;AAAA,MACb,CAAK;AAAA,IACF;AA+CD,WAAO,GAAG,mBAAmB,UAAQ;AACnC,cAAQ,IAAI,uBAAuB,IAAI;AAEvC,UAAI,KAAK,QAAQ,KAAI,MAAO,IAAI;AAC9B,iBAAS,MAAM,KAAK;AAAA,UAClB,IAAI,KAAK,IAAK;AAAA,UACd,QAAQ,KAAK;AAAA,UACb,MAAM,KAAK;AAAA,UACX,MAAM,OAAO,oBAAI,KAAM,CAAA,EAAE,OAAO,MAAM;AAAA,QAC9C,CAAO;AAED,mBAAW,MAAM;AACf,cAAI,MAAM,SAAS,eAAe,UAAU;AAC5C,cAAI,YAAY,IAAI;AAAA,QACr}